#include <Adafruit_GFX.h>    // Libreria de graficos
#include <Adafruit_TFTLCD.h> // Libreria de LCD 
#include <TouchScreen.h>     // Libreria del panel tactil

#define YP A1 // Pin analogico A1 para ADC
#define XM A2 // Pin analogico A2 para ADC
#define YM 7
#define XP 6
#define MINPRESSURE 1
#define MAXPRESSURE 1000

TouchScreen ts = TouchScreen(XP, YP, XM, YM, 356);

short TS_MINX = 200; // Coordenadas del panel tactil para delimitar
short TS_MINY = 120; // el tamaño de la zona donde podemos presionar
short TS_MAXX = 850; // y que coincida con el tamaño del LCD
short TS_MAXY = 891;

#define LCD_CS A3   // Definimos los pines del LCD
#define LCD_CD A2   // para poder visualizar elementos graficos
#define LCD_WR A1
#define LCD_RD A0
#define LCD_RESET A4

#define CYAN_2    0x77FC //COLOR AL OPRIMIR ALGO
#define C_BORDE   0xFFF3
#define FONDO     0xAE0E //(rgb-color vivo)
#define BLACK   0x0000  // Definimos los colores 
#define BLUE    0x001F  // que utilizaremos para 
#define RED     0xF800  // el texto y los elementos graficos
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

#define BIT(b) (1<<b)

#define PRS0_T1 TCCR1B = BIT(WGM12)
#define PRS1_T1 TCCR1B = BIT(WGM12)| BIT(CS10)
#define EN_INT0 EIMSK = BIT(INT0)
#define DIS_INT0 EIMSK = 0x00

Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET); // Instancia LCD

int X; // Variables que almacenaran la coordenada
int Y; // X, Y donde presionemos y la variable Z
int Z; // almacenara la presion realizada

volatile int rev = 0;
volatile uint32_t time_ms = 0;
volatile double time_ms_double = 0;
volatile long rpm = 0;
volatile long acum_rpm = 0;
volatile long rpm_shown = 0;
volatile long rpm_shown_bef = 0;

#define ledA 21
#define ledK 20

void setup()
{
  cli();

  TCNT1 = 0x00;
  TCCR1A = 0;
  TIMSK1 = BIT(OCIE1A);
  TIFR1 = BIT(OCF1A);

  EICRA = BIT(ISC01) | BIT(ISC00); // RISING EDGE INTERRUPT FOR INT0 (PD2)
  
  tft.begin(0x9325); // Iniciamos el LCD especificando el controlador ILI9341.
  tft.setRotation(1); // Establecemos la posición de la pantalla  Horizontal
  tft.fillScreen(FONDO);
  bordes(5, 5, 310, 230, C_BORDE, 5);
  reconstruccion();
  sei();

  OCR1A = 63; //64-1
  PRS0_T1;
  DIS_INT0;
}

void loop()
{
  if (rpm_shown_bef != rpm_shown) rpm_shown_bef = actualizar_numero_mr(rpm_shown, rpm_shown_bef);
  
  lecturaPanel();
  

  /*Serial.print ("X : ");
  Serial.print (X);
  Serial.print ("   Y : ");
  Serial.println (Y);
  */
  

  if ((X > 85 && X < 175) && (Y > 288 && Y < 336) && (Z > MINPRESSURE && Z < MAXPRESSURE))
  {
    //boton aceptar
    button_aceptar(CYAN_2);
    delay(50);
    button_aceptar(CYAN);
    PRS1_T1;
    EN_INT0;
  }
  else if ((X > 85 && X < 175) && (Y > 50 && Y < 108)&&(Z > MINPRESSURE && Z < MAXPRESSURE))
  {
    //boton detener
    button_stop(CYAN_2);
    delay(80);
    button_stop(CYAN);
    PRS0_T1;
    DIS_INT0;
  }

}
void lecturaPanel()
{
  digitalWrite(13, HIGH);
  TSPoint p = ts.getPoint(); // Realizamos lectura de las coordenadas
  digitalWrite(13, LOW);

  pinMode(XM, OUTPUT); // La librería utiliza estos pines como entrada y salida
  pinMode(YP, OUTPUT); // por lo que es necesario declararlos como salida justo
  // despues de realizar una lectura de coordenadas.

  // Mapeamos los valores analogicos leidos del panel tactil (0-1023)
  // y los convertimos en valor correspondiente a la medida del LCD 320x240
  Y = map(p.x, TS_MAXX, TS_MINX, tft.width(), 0);
  X = map(p.y, TS_MAXY, TS_MINY, tft.height(), 0);
  Z = p.z;
}

void reconstruccion()
{
  //recuadro RPM's
  bordes(64, 82 + 30, 195, 66, C_BORDE, 2);
  tft.fillRect(65, 83 + 30, 193, 65, CYAN);
  //boton aceptar
  bordes(100, 180 + 20, 120, 30, C_BORDE, 2);
  button_aceptar(CYAN);
  //boton parar
  bordes(100, 60, 120, 30, C_BORDE, 2);
  button_stop(CYAN);
}
void bordes(int x, int y, int ancho, int largo, long color, int ancho_borde)
{
  for (int i = 0; i <= ancho_borde; i++)
  {
    tft.drawRect(x - i, y - i, ancho + (2 * i), largo + (2 * i), color);
  }
}
void button_stop(long color)
{
  bordes(100, 60, 120, 30, C_BORDE, 2);
  tft.fillRect(101, 61, 118, 29, color);
  tft.setTextSize(2);
  tft.setTextColor(C_BORDE);
  tft.setCursor(120, 69);
  tft.println("DETENER");
}
void button_aceptar(long color)
{
  bordes(100, 180 + 20, 120, 30, C_BORDE, 2);
  tft.fillRect(101, 181 + 20, 118, 29, color);
  tft.setTextSize(2);
  tft.setTextColor(C_BORDE);
  tft.setCursor(120, 189 + 20);
  tft.println("ACEPTAR");
}

long actualizar_numero_mr (volatile long valor, volatile long valor_ant)
{
  tft.setTextSize(6);
  int n = int(log10(valor));
  int n_ant = int(log10(valor_ant));

  tft.setTextColor(CYAN);
  tft.setCursor(140 - 16 * n_ant, 93 + 30);
  tft.println(valor_ant);
  /*ECUACION DE CORRECCIÓN*/
  valor = floor (1.0501 * pow(valor,0.9927));

  tft.setTextColor(C_BORDE);
  tft.setCursor(140 - 16 * n, 93 + 30);
  tft.println(valor);

  return valor;
  
}
ISR(INT0_vect)
{
  rev++;
  rpm = (60000 /  (time_ms / 1000.0))  ;
  time_ms = 0;
  acum_rpm = acum_rpm + rpm;
  if (rev % 50 == 0)
  {
    rpm_shown = acum_rpm / 50;
    acum_rpm = 0;
  }
}
ISR(TIMER1_COMPA_vect)
{
  time_ms += 4; //cada 0,004ms
}